#!/bin/bash
# SimpleDaemons Project Automation
# This script helps automate common project tasks

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AUTOMATION_DIR="$(dirname "$SCRIPT_DIR")"
ROOT_DIR="$(dirname "$AUTOMATION_DIR")"
STANDARDIZATION_DIR="$ROOT_DIR/projects/STANDARDIZATION_TEMPLATES"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [COMMAND] [PROJECT] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  build [project]       Build a specific project"
    echo "  test [project]        Test a specific project"
    echo "  install [project]    Install a specific project"
    echo "  package [project]    Package a specific project"
    echo "  clean [project]      Clean a specific project"
    echo "  status [project]     Show project status"
    echo "  standardize [project] Implement standardization for project"
    echo "  all-build            Build all projects"
    echo "  all-test             Test all projects"
    echo "  all-clean            Clean all projects"
    echo "  list                 List available projects"
    echo ""
    echo "Options:"
    echo "  -h, --help           Show this help message"
    echo "  -v, --verbose         Verbose output"
    echo "  -f, --force          Force operation"
    echo ""
    echo "Examples:"
    echo "  $0 build simple-ntpd     # Build simple-ntpd"
    echo "  $0 test simple-httpd      # Test simple-httpd"
    echo "  $0 all-build              # Build all projects"
}

# Function to list available projects
list_projects() {
    print_status "Available projects:"
    for project_dir in "$ROOT_DIR/projects"/*/; do
        if [ -d "$project_dir" ]; then
            project_name=$(basename "$project_dir")
            echo "  - $project_name"
        fi
    done
}

# Function to get project directory
get_project_dir() {
    local project_name="$1"
    echo "$ROOT_DIR/projects/$project_name"
}

# Function to build project
build_project() {
    local project_name="$1"
    local verbose="$2"
    
    if [ -z "$project_name" ]; then
        print_error "Project name required"
        list_projects
        exit 1
    fi
    
    local project_dir=$(get_project_dir "$project_name")
    if [ ! -d "$project_dir" ]; then
        print_error "Project directory not found: $project_dir"
        list_projects
        exit 1
    fi
    
    print_status "Building project: $project_name"
    
    cd "$project_dir"
    
    # Create build directory if it doesn't exist
    if [ ! -d "build" ]; then
        mkdir build
    fi
    
    cd build
    
    # Configure with CMake
    if [ "$verbose" = "true" ]; then
        cmake .. -DCMAKE_BUILD_TYPE=Release
    else
        cmake .. -DCMAKE_BUILD_TYPE=Release > /dev/null 2>&1
    fi
    
    # Build
    if [ "$verbose" = "true" ]; then
        make -j$(nproc)
    else
        make -j$(nproc) > /dev/null 2>&1
    fi
    
    if [ $? -eq 0 ]; then
        print_success "Project $project_name built successfully"
    else
        print_error "Project $project_name build failed"
        exit 1
    fi
}

# Function to test project
test_project() {
    local project_name="$1"
    local verbose="$2"
    
    if [ -z "$project_name" ]; then
        print_error "Project name required"
        list_projects
        exit 1
    fi
    
    local project_dir=$(get_project_dir "$project_name")
    if [ ! -d "$project_dir" ]; then
        print_error "Project directory not found: $project_dir"
        list_projects
        exit 1
    fi
    
    print_status "Testing project: $project_name"
    
    cd "$project_dir"
    
    # Check if Makefile exists
    if [ -f "Makefile" ]; then
        if [ "$verbose" = "true" ]; then
            make test
        else
            make test > /dev/null 2>&1
        fi
    elif [ -d "build" ]; then
        cd build
        if [ "$verbose" = "true" ]; then
            ctest --verbose
        else
            ctest
        fi
    else
        print_error "No test configuration found for $project_name"
        exit 1
    fi
    
    if [ $? -eq 0 ]; then
        print_success "Project $project_name tests passed"
    else
        print_error "Project $project_name tests failed"
        exit 1
    fi
}

# Function to install project
install_project() {
    local project_name="$1"
    local verbose="$2"
    
    if [ -z "$project_name" ]; then
        print_error "Project name required"
        list_projects
        exit 1
    fi
    
    local project_dir=$(get_project_dir "$project_name")
    if [ ! -d "$project_dir" ]; then
        print_error "Project directory not found: $project_dir"
        list_projects
        exit 1
    fi
    
    print_status "Installing project: $project_name"
    
    cd "$project_dir"
    
    # Check if Makefile exists
    if [ -f "Makefile" ]; then
        if [ "$verbose" = "true" ]; then
            sudo make install
        else
            sudo make install > /dev/null 2>&1
        fi
    elif [ -d "build" ]; then
        cd build
        if [ "$verbose" = "true" ]; then
            sudo make install
        else
            sudo make install > /dev/null 2>&1
        fi
    else
        print_error "No install configuration found for $project_name"
        exit 1
    fi
    
    if [ $? -eq 0 ]; then
        print_success "Project $project_name installed successfully"
    else
        print_error "Project $project_name installation failed"
        exit 1
    fi
}

# Function to package project
package_project() {
    local project_name="$1"
    local verbose="$2"
    
    if [ -z "$project_name" ]; then
        print_error "Project name required"
        list_projects
        exit 1
    fi
    
    local project_dir=$(get_project_dir "$project_name")
    if [ ! -d "$project_dir" ]; then
        print_error "Project directory not found: $project_dir"
        list_projects
        exit 1
    fi
    
    print_status "Packaging project: $project_name"
    
    cd "$project_dir"
    
    # Check if Makefile exists
    if [ -f "Makefile" ]; then
        if [ "$verbose" = "true" ]; then
            make package
        else
            make package > /dev/null 2>&1
        fi
    elif [ -d "build" ]; then
        cd build
        if [ "$verbose" = "true" ]; then
            cpack
        else
            cpack > /dev/null 2>&1
        fi
    else
        print_error "No package configuration found for $project_name"
        exit 1
    fi
    
    if [ $? -eq 0 ]; then
        print_success "Project $project_name packaged successfully"
    else
        print_error "Project $project_name packaging failed"
        exit 1
    fi
}

# Function to clean project
clean_project() {
    local project_name="$1"
    
    if [ -z "$project_name" ]; then
        print_error "Project name required"
        list_projects
        exit 1
    fi
    
    local project_dir=$(get_project_dir "$project_name")
    if [ ! -d "$project_dir" ]; then
        print_error "Project directory not found: $project_dir"
        list_projects
        exit 1
    fi
    
    print_status "Cleaning project: $project_name"
    
    cd "$project_dir"
    
    # Check if Makefile exists
    if [ -f "Makefile" ]; then
        make clean
    elif [ -d "build" ]; then
        rm -rf build
    fi
    
    print_success "Project $project_name cleaned"
}

# Function to show project status
show_status() {
    local project_name="$1"
    
    if [ -n "$project_name" ]; then
        local project_dir=$(get_project_dir "$project_name")
        if [ ! -d "$project_dir" ]; then
            print_error "Project directory not found: $project_dir"
            list_projects
            exit 1
        fi
        
        print_status "Status for project: $project_name"
        echo ""
        
        # Check if binary exists
        if [ -f "$project_dir/build/$project_name" ]; then
            echo "  ✅ Binary: Found"
        else
            echo "  ❌ Binary: Not found"
        fi
        
        # Check if service is installed
        if systemctl list-unit-files | grep -q "$project_name.service"; then
            echo "  ✅ Service: Installed"
            systemctl is-active "$project_name.service" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                echo "  ✅ Status: Running"
            else
                echo "  ⚠️  Status: Stopped"
            fi
        else
            echo "  ❌ Service: Not installed"
        fi
        
        # Check if packages exist
        if [ -d "$project_dir/dist" ]; then
            echo "  ✅ Packages: Found"
            ls -la "$project_dir/dist/"
        else
            echo "  ❌ Packages: Not found"
        fi
    else
        print_status "Status for all projects:"
        echo ""
        
        for project_dir in "$ROOT_DIR/projects"/*/; do
            if [ -d "$project_dir" ]; then
                project_name=$(basename "$project_dir")
                echo "Project: $project_name"
                
                # Check if binary exists
                if [ -f "$project_dir/build/$project_name" ]; then
                    echo "  ✅ Binary: Found"
                else
                    echo "  ❌ Binary: Not found"
                fi
                
                # Check if service is installed
                if systemctl list-unit-files | grep -q "$project_name.service"; then
                    echo "  ✅ Service: Installed"
                    systemctl is-active "$project_name.service" > /dev/null 2>&1
                    if [ $? -eq 0 ]; then
                        echo "  ✅ Status: Running"
                    else
                        echo "  ⚠️  Status: Stopped"
                    fi
                else
                    echo "  ❌ Service: Not installed"
                fi
                
                echo ""
            fi
        done
    fi
}

# Function to standardize project
standardize_project() {
    local project_name="$1"
    local force="$2"
    
    if [ -z "$project_name" ]; then
        print_error "Project name required"
        list_projects
        exit 1
    fi
    
    local project_dir=$(get_project_dir "$project_name")
    if [ ! -d "$project_dir" ]; then
        print_error "Project directory not found: $project_dir"
        list_projects
        exit 1
    fi
    
    print_status "Standardizing project: $project_name"
    
    cd "$STANDARDIZATION_DIR"
    
    local force_flag=""
    if [ "$force" = "true" ]; then
        force_flag="--force"
    fi
    
    ./implement_standardization.sh "$project_name" $force_flag
    
    print_success "Project $project_name standardized"
}

# Function to build all projects
build_all() {
    local verbose="$1"
    
    print_status "Building all projects..."
    
    for project_dir in "$ROOT_DIR/projects"/*/; do
        if [ -d "$project_dir" ]; then
            project_name=$(basename "$project_dir")
            echo ""
            build_project "$project_name" "$verbose"
        fi
    done
    
    print_success "All projects built successfully"
}

# Function to test all projects
test_all() {
    local verbose="$1"
    
    print_status "Testing all projects..."
    
    for project_dir in "$ROOT_DIR/projects"/*/; do
        if [ -d "$project_dir" ]; then
            project_name=$(basename "$project_dir")
            echo ""
            test_project "$project_name" "$verbose"
        fi
    done
    
    print_success "All projects tested successfully"
}

# Function to clean all projects
clean_all() {
    print_status "Cleaning all projects..."
    
    for project_dir in "$ROOT_DIR/projects"/*/; do
        if [ -d "$project_dir" ]; then
            project_name=$(basename "$project_dir")
            echo ""
            clean_project "$project_name"
        fi
    done
    
    print_success "All projects cleaned successfully"
}

# Main function
main() {
    local command="$1"
    local project="$2"
    local verbose="false"
    local force="false"
    
    # Parse options
    shift 2
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                verbose="true"
                shift
                ;;
            -f|--force)
                force="true"
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    case "$command" in
        build)
            build_project "$project" "$verbose"
            ;;
        test)
            test_project "$project" "$verbose"
            ;;
        install)
            install_project "$project" "$verbose"
            ;;
        package)
            package_project "$project" "$verbose"
            ;;
        clean)
            clean_project "$project"
            ;;
        status)
            show_status "$project"
            ;;
        standardize)
            standardize_project "$project" "$force"
            ;;
        all-build)
            build_all "$verbose"
            ;;
        all-test)
            test_all "$verbose"
            ;;
        all-clean)
            clean_all
            ;;
        list)
            list_projects
            ;;
        -h|--help|help)
            show_usage
            ;;
        *)
            print_error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
