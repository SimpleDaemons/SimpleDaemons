#!/bin/bash
# SimpleDaemons VM Manager
# This script helps manage development VMs for all projects

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AUTOMATION_DIR="$(dirname "$SCRIPT_DIR")"
ROOT_DIR="$(dirname "$AUTOMATION_DIR")"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  up [vm] [project]     Start VM (optionally for specific project)"
    echo "  down [vm]             Stop VM"
    echo "  status [vm]           Show VM status"
    echo "  ssh [vm]              SSH into VM"
    echo "  provision [vm]        Re-provision VM"
    echo "  list                  List available VMs"
    echo "  projects              List available projects"
    echo ""
    echo "Options:"
    echo "  -h, --help            Show this help message"
    echo "  -v, --verbose          Verbose output"
    echo ""
    echo "Examples:"
    echo "  $0 up ubuntu_dev simple-ntpd    # Start Ubuntu VM with simple-ntpd"
    echo "  $0 ssh ubuntu_dev               # SSH into Ubuntu VM"
    echo "  $0 status                       # Show status of all VMs"
}

# Function to list available VMs
list_vms() {
    print_status "Available VMs:"
    for vm_dir in "$ROOT_DIR/virtuals"/*/; do
        if [ -d "$vm_dir" ] && [ -f "$vm_dir/Vagrantfile" ]; then
            vm_name=$(basename "$vm_dir")
            echo "  - $vm_name"
        fi
    done
}

# Function to list available projects
list_projects() {
    print_status "Available projects:"
    for project_dir in "$ROOT_DIR/projects"/*/; do
        if [ -d "$project_dir" ]; then
            project_name=$(basename "$project_dir")
            echo "  - $project_name"
        fi
    done
}

# Function to start VM
start_vm() {
    local vm_name="$1"
    local project_name="$2"
    
    if [ -z "$vm_name" ]; then
        print_error "VM name required"
        list_vms
        exit 1
    fi
    
    local vm_dir="$ROOT_DIR/virtuals/$vm_name"
    if [ ! -d "$vm_dir" ]; then
        print_error "VM directory not found: $vm_dir"
        list_vms
        exit 1
    fi
    
    print_status "Starting VM: $vm_name"
    if [ -n "$project_name" ]; then
        print_status "Project: $project_name"
        export PROJECT_NAME="$project_name"
    fi
    
    cd "$vm_dir"
    vagrant up
    
    print_success "VM $vm_name started successfully"
    
    if [ -n "$project_name" ]; then
        print_status "Project $project_name should be available at /opt/simple-daemons/$project_name"
    fi
}

# Function to stop VM
stop_vm() {
    local vm_name="$1"
    
    if [ -z "$vm_name" ]; then
        print_error "VM name required"
        list_vms
        exit 1
    fi
    
    local vm_dir="$ROOT_DIR/virtuals/$vm_name"
    if [ ! -d "$vm_dir" ]; then
        print_error "VM directory not found: $vm_dir"
        list_vms
        exit 1
    fi
    
    print_status "Stopping VM: $vm_name"
    
    cd "$vm_dir"
    vagrant halt
    
    print_success "VM $vm_name stopped successfully"
}

# Function to show VM status
show_status() {
    local vm_name="$1"
    
    if [ -n "$vm_name" ]; then
        local vm_dir="$ROOT_DIR/virtuals/$vm_name"
        if [ ! -d "$vm_dir" ]; then
            print_error "VM directory not found: $vm_dir"
            list_vms
            exit 1
        fi
        
        print_status "Status for VM: $vm_name"
        cd "$vm_dir"
        vagrant status
    else
        print_status "Status for all VMs:"
        for vm_dir in "$ROOT_DIR/virtuals"/*/; do
            if [ -d "$vm_dir" ] && [ -f "$vm_dir/Vagrantfile" ]; then
                vm_name=$(basename "$vm_dir")
                echo ""
                print_status "VM: $vm_name"
                cd "$vm_dir"
                vagrant status
            fi
        done
    fi
}

# Function to SSH into VM
ssh_vm() {
    local vm_name="$1"
    
    if [ -z "$vm_name" ]; then
        print_error "VM name required"
        list_vms
        exit 1
    fi
    
    local vm_dir="$ROOT_DIR/virtuals/$vm_name"
    if [ ! -d "$vm_dir" ]; then
        print_error "VM directory not found: $vm_dir"
        list_vms
        exit 1
    fi
    
    print_status "SSH into VM: $vm_name"
    
    cd "$vm_dir"
    vagrant ssh
}

# Function to provision VM
provision_vm() {
    local vm_name="$1"
    
    if [ -z "$vm_name" ]; then
        print_error "VM name required"
        list_vms
        exit 1
    fi
    
    local vm_dir="$ROOT_DIR/virtuals/$vm_name"
    if [ ! -d "$vm_dir" ]; then
        print_error "VM directory not found: $vm_dir"
        list_vms
        exit 1
    fi
    
    print_status "Provisioning VM: $vm_name"
    
    cd "$vm_dir"
    vagrant provision
    
    print_success "VM $vm_name provisioned successfully"
}

# Main function
main() {
    local command="$1"
    shift
    
    case "$command" in
        up)
            start_vm "$@"
            ;;
        down)
            stop_vm "$@"
            ;;
        status)
            show_status "$@"
            ;;
        ssh)
            ssh_vm "$@"
            ;;
        provision)
            provision_vm "$@"
            ;;
        list)
            list_vms
            ;;
        projects)
            list_projects
            ;;
        -h|--help|help)
            show_usage
            ;;
        *)
            print_error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
